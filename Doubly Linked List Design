
class Node:
    def __init__(self, val, next = None, prev = None):
        self.val = val
        self.next = next
        self.prev = prev

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_begin(self, val):
        if self.head is None:
            self.head = Node(val)
            return
        node = Node(val,self.head)
        self.head.prev = node
        self.head = node

    def insert_end(self,val):
        if self.head is None:
            self.head = Node(val)
            return
        dummy = self.head
        while dummy.next:
            dummy = dummy.next
        node = Node(val, None, dummy)
        dummy.next = node

    def insert_middle(self, val, idx):
        if idx > self.get_length() or idx < 0:
            raise Exception("Index out of range!")
        if idx == 0:
            self.insert_begin(val)
        elif idx == self.get_length():
            self.insert_end(val)
        else:
            count = 0 
            dummy = self.head
            while dummy:
                if count == idx - 1:
                    node = Node(val, dummy.next, dummy)
                    dummy.next.prev = node
                    dummy.next = node
                    break
                dummy = dummy.next
                count += 1

    def remove_index(self, idx):
        if idx < 0 or idx > self.get_length():
            print("Invalid index")
            return
        else:
            count = 0
            dummy = self.head
            while dummy:
                if count == idx - 1:
                    dummy.next = dummy.next.next
                    if dummy.next is None:
                        return
                    else:
                        dummy.next.prev = dummy
                    break
                dummy = dummy.next
                count += 1


    def print(self):
        if self.head is None:
            print("The linked list is empty!")
            return
        dummy = self.head
        ll_str = ""
        while dummy:
            ll_str += str(dummy.val) + "->"
            dummy = dummy.next
        print(ll_str)

    def get_length(self):
        count = 0
        dummy = self.head
        while dummy:
            dummy = dummy.next
            count += 1
        return count

ll = LinkedList()
ll.insert_begin(1)
ll.insert_begin(2)
ll.insert_end(10)
ll.insert_end(100)
ll.insert_begin(500)
ll.insert_middle(10000, 2)
ll.insert_middle(300, 6)
ll.print()
ll.remove_index(3)
ll.remove_index(10)
ll.print()
ll.remove_index(5)
ll.print()
print(ll.get_length())


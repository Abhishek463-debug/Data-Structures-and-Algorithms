
#UNDIRECTED GRAPH (MEANING a<->b<->c<->a (one possible example for undirected graph)) The edge has no direction. There is a path from a to b as well as a path from b to a.


class Graph:
    def __init__(self, vertices, edges):
        self.edges = set(frozenset((u,v)) for u,v in edges)
        self._neighbors = {}
        for v in vertices:
            self.addvertex(v)
        for u,v in self.edges:
            self.addedges(u,v)

    def addvertex(self, v):
        if v not in self._neighbors:
            self._neighbors[v]= set()

    def addedges(self, u, v):
        self.addvertex(u)
        self.addvertex(v)
        self._neighbors[u].add(v)
        self._neighbors[v].add(u)
        self.edges.add(frozenset((u,v)))

    def removeedge(self, u, v):
        edge = frozenset((u,v))
        if edge in self.edges:
            self.edges.remove(edge)
            self._neighbors[u].remove(v)
            self._neighbors[v].remove(u)

    def removevertex(self, v):
        listtodelete = list(self.neighbors(v))
        for neighbor in listtodelete:
            self.removeedge(neighbor, v)

        self._neighbors.pop(v)

        

    def degrees(self, v):
        return len(self._neighbors[v])

    def neighbors(self, v):
        return iter(self._neighbors[v])


graph = Graph([1, 2, 1, 3], {(1,2), (1,3), (2,3)})

print(graph.degrees(2))
graph.removevertex(2)
print(set(graph.neighbors(3)))
print(graph.edges)
graph.addedges(10, 3)
print(graph.edges)
print(list(graph.neighbors(3)))  #graph.neighbors(n) is an iterator object so we have to transform to list or tuple or set.

#DIRECTED GRAPHS ARE ESSENTIALLY UNDIRECTED GRAPHS WITH A FEW CHANGES, SUCH AS FOR AN EDGE (U,V) WE ONLY ADD V TO LIST OF KEY U and NOT THE OTHER WAY AROUND.

class Graph:
    def __init__(self, vertices, edges):
        self.edges = edges
        self._neighbors = {}
        for v in vertices:
            self.addvertex(v)
        for u,v in self.edges:
            self.addedges(u,v)

    def addvertex(self, v):
        if v not in self._neighbors:
            self._neighbors[v]= set()

    def addedges(self, u, v):
        self.addvertex(u)
        self.addvertex(v)
        self._neighbors[u].add(v)
        self.edges.add((u,v))

    def removeedge(self, u, v):
        edge = (u,v)
        if edge in self.edges:
            self.edges.remove(edge)
            self._neighbors[u].remove(v)
            

    def removevertex(self, v):
        listtodelete = list(self.neighbors(v))
        for neighbor in listtodelete:
            self.removeedge(neighbor, v)

        self._neighbors.pop(v) #WE can also use del self._neighbors[v]
    
    def get_all_paths(self, start, end, path = []):
        path = path + [start]
        if start == end:
            return [path]
        if start not in self._neighbors:
            return []
        paths = []
        for node in self._neighbors[start]:
            if node not in path:
                new_path = self.get_all_paths(node,end,path)
                for p in new_path:
                    paths.append(p)

        return paths

    def get_shortest_path(self, start, end, path =[]):
        path = path + [start]
        if start == end:
            return path
        if start not in self._neighbors:
            return None
        shortest_path = None
        for node in self._neighbors[start]:
            if node not in path:
                new_path = self.get_shortest_path(node, end, path)
                if new_path:
                    if shortest_path is None or len(new_path) < len(shortest_path):
                        shortest_path = new_path

        return shortest_path

    def least_size(self, start, end):
        return len(self.get_shortest_path(start, end))

        

    def degrees(self, v):
        return len(self._neighbors[v])

    def neighbors(self, v):
        return iter(self._neighbors[v])


routes = {("Mumbai", "Paris"),
          ("Mumbai", "Dubai"),
          ("Paris", "Dubai"),
          ("Paris", "New York"),
          ("Dubai", "New York"),
          ("New York", "Toronto") }
cities = {"Mumbai", "Paris", "Dubai", "Dubai", "New York", "Toronto"}

route_graph = Graph(cities, routes)
print(route_graph.get_all_paths("Mumbai", "Mumbai"))
print(route_graph.get_all_paths("Los Angeles", "Seattle"))
print(route_graph.get_all_paths("Mumbai", "Toronto"))

print(route_graph.get_shortest_path("Mumbai", "Toronto"))
#Getting all minimum paths:
min_size = None
for path in route_graph.get_all_paths("Mumbai", "Toronto"):
    if min_size is None or len(path) < min_size:
        min_size = len(path)

for path in route_graph.get_all_paths("Mumbai", "Toronto"):
    if len(path) == min_size:
        print(path)

#CREATED A FUNCTION TO GET MIN SIZE (SLIGHTLY FASTER THAN TWO FOR LOOPS)
minimum_size = route_graph.least_size("Mumbai", "Toronto")
for path in route_graph.get_all_paths("Mumbai", "Toronto"):
    if len(path) == minimum_size:
        print(path, end = " ")
